from itertools import chain, cycle

digits = '59704176224151213770484189932636989396016853707543672704688031159981571127975101449262562108536062222616286393177775420275833561490214618092338108958319534766917790598728831388012618201701341130599267905059417956666371111749252733037090364984971914108277005170417001289652084308389839318318592713462923155468396822247189750655575623017333088246364350280299985979331660143758996484413769438651303748536351772868104792161361952505811489060546839032499706132682563962136170941039904873411038529684473891392104152677551989278815089949043159200373061921992851799948057507078358356630228490883482290389217471790233756775862302710944760078623023456856105493'
# digits = '80871224585914546619083218645595'

base_pattern = [0, 1, 0, -1]

patterns = []


def get_pattern(p):
  pattern = cycle(list(chain(*[[int(d)] * (p + 1) for d in base_pattern])))

  next(pattern)
  return pattern


def calculate_new_digit(digits, p):
  pattern = get_pattern(p)

  new_d_sum = 0
  # print("[%s]" % p)
  for d in digits:
    d = int(d)

    pattern_value = next(pattern)
    # print("+ %s * %s" % (d, pattern_value))
    new_d_sum += d * pattern_value

  new_last_digit = abs(new_d_sum) % 10
  # print("Digit: %s[%s]" % (new_d_sum // 10, new_last_digit))
  return new_last_digit


for i in range(0, 100):
  print("Phase %s" % (i + 1))
  new_digits = []

  for p in range(0, len(digits)):
    new_digits.append(calculate_new_digit(digits, p))

  digits = new_digits[:]
  print(''.join([str(d) for d in digits[:8]]))
  continue
